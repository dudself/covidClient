/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.covidclient;

import com.mycompany.covidclient.COVIDClient.Covid;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author 221ho
 */
public class COVIDFrame extends javax.swing.JFrame {

    /**
     * Creates new form COVIDFrame
     */
    public COVIDFrame() throws Exception {

        initComponents();
        //Tree oluşturuldu
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Statics");
        DefaultMutableTreeNode world = new DefaultMutableTreeNode("Global");
        root.add(world);
        DefaultMutableTreeNode usa = new DefaultMutableTreeNode("America");
        root.add(usa);
        DefaultMutableTreeNode spain = new DefaultMutableTreeNode("Spain");
        root.add(spain);
        DefaultMutableTreeNode russia = new DefaultMutableTreeNode("Russia");
        root.add(russia);
        DefaultMutableTreeNode uk = new DefaultMutableTreeNode("England");
        root.add(uk);
        DefaultMutableTreeNode italy = new DefaultMutableTreeNode("Italy");
        root.add(italy);
        DefaultMutableTreeNode brazil = new DefaultMutableTreeNode("Brazil");
        root.add(brazil);
        DefaultMutableTreeNode france = new DefaultMutableTreeNode("France");
        root.add(france);
        DefaultMutableTreeNode germany = new DefaultMutableTreeNode("Germany");
        root.add(germany);
        DefaultMutableTreeNode turkey = new DefaultMutableTreeNode("Turkey");
        root.add(turkey);
        //Model setlendi
        DefaultTreeModel tree_model = new DefaultTreeModel(root);
        staticsTree.setModel(tree_model);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        staticsTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        cTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        staticsTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        staticsTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                staticsTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(staticsTree);

        cTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(cTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("COVID-19 STATICS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void staticsTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staticsTreeMouseClicked
        //Ağaca tıklandığında tabloya nodeları aktarır
        try {
            TreePath tp = staticsTree.getPathForLocation(evt.getX(), evt.getY());
            String nodeName = tp.getLastPathComponent().toString();
            switch (nodeName) {
                case "Global":
                    tableSetter(nodeName);
                    break;
                case "America":
                    tableSetter(nodeName);
                    break;
                case "Spain":
                    tableSetter(nodeName);
                    break;
                case "Russia":
                    tableSetter(nodeName);
                    break;
                case "England":
                    tableSetter(nodeName);
                    break;
                case "Italy":
                    tableSetter(nodeName);
                    break;
                case "Brazil":
                    tableSetter(nodeName);
                    break;
                case "France":
                    tableSetter(nodeName);
                    break;
                case "Germany":
                    tableSetter(nodeName);
                    break;
                case "Turkey":
                    tableSetter(nodeName);
                    break;
                default:
                    break;
            }
        } catch (java.lang.NullPointerException e) {

        }
    }//GEN-LAST:event_staticsTreeMouseClicked
    //Ağaca tıklandığında tabloya api'den çektiği bilgileri aktarır
    public void tableSetter(String key) {
        DefaultTableModel staticsTable = new DefaultTableModel();
        staticsTable.setColumnIdentifiers(new Object[]{"Name", "Cases", "Today Cases", "Deaths", "Today Deaths",
            "Recovered", "Active", "Critical", "Total Tests"});
        switch (key) {
            case "Global":
                staticsTable.setRowCount(1);
                valueSetter(staticsTable, "world", 0, 0);
                valueSetter(staticsTable, "world", 0, 1);
                valueSetter(staticsTable, "world", 0, 2);
                valueSetter(staticsTable, "world", 0, 3);
                valueSetter(staticsTable, "world", 0, 4);
                valueSetter(staticsTable, "world", 0, 5);
                valueSetter(staticsTable, "world", 0, 6);
                valueSetter(staticsTable, "world", 0, 7);
                valueSetter(staticsTable, "world", 0, 8);
                cTable.setModel(staticsTable);
                break;
            case "America":
                staticsTable.setRowCount(1);
                valueSetter(staticsTable, "usa", 0, 0);
                valueSetter(staticsTable, "usa", 0, 1);
                valueSetter(staticsTable, "usa", 0, 2);
                valueSetter(staticsTable, "usa", 0, 3);
                valueSetter(staticsTable, "usa", 0, 4);
                valueSetter(staticsTable, "usa", 0, 5);
                valueSetter(staticsTable, "usa", 0, 6);
                valueSetter(staticsTable, "usa", 0, 7);
                valueSetter(staticsTable, "usa", 0, 8);
                cTable.setModel(staticsTable);
                break;
            case "Spain":
                staticsTable.setRowCount(1);
                valueSetter(staticsTable, key, 0, 0);
                valueSetter(staticsTable, key, 0, 1);
                valueSetter(staticsTable, key, 0, 2);
                valueSetter(staticsTable, key, 0, 3);
                valueSetter(staticsTable, key, 0, 4);
                valueSetter(staticsTable, key, 0, 5);
                valueSetter(staticsTable, key, 0, 6);
                valueSetter(staticsTable, key, 0, 7);
                valueSetter(staticsTable, key, 0, 8);
                cTable.setModel(staticsTable);
                break;
            case "Russia":
                staticsTable.setRowCount(1);
                valueSetter(staticsTable, key, 0, 0);
                valueSetter(staticsTable, key, 0, 1);
                valueSetter(staticsTable, key, 0, 2);
                valueSetter(staticsTable, key, 0, 3);
                valueSetter(staticsTable, key, 0, 4);
                valueSetter(staticsTable, key, 0, 5);
                valueSetter(staticsTable, key, 0, 6);
                valueSetter(staticsTable, key, 0, 7);
                valueSetter(staticsTable, key, 0, 8);
                cTable.setModel(staticsTable);
                break;
            case "England":
                staticsTable.setRowCount(1);
                valueSetter(staticsTable, "uk", 0, 0);
                valueSetter(staticsTable, "uk", 0, 1);
                valueSetter(staticsTable, "uk", 0, 2);
                valueSetter(staticsTable, "uk", 0, 3);
                valueSetter(staticsTable, "uk", 0, 4);
                valueSetter(staticsTable, "uk", 0, 5);
                valueSetter(staticsTable, "uk", 0, 6);
                valueSetter(staticsTable, "uk", 0, 7);
                valueSetter(staticsTable, "uk", 0, 8);
                cTable.setModel(staticsTable);
                break;
            case "Italy":
                staticsTable.setRowCount(1);
                valueSetter(staticsTable, key, 0, 0);
                valueSetter(staticsTable, key, 0, 1);
                valueSetter(staticsTable, key, 0, 2);
                valueSetter(staticsTable, key, 0, 3);
                valueSetter(staticsTable, key, 0, 4);
                valueSetter(staticsTable, key, 0, 5);
                valueSetter(staticsTable, key, 0, 6);
                valueSetter(staticsTable, key, 0, 7);
                valueSetter(staticsTable, key, 0, 8);
                cTable.setModel(staticsTable);
                break;
            case "Brazil":
                staticsTable.setRowCount(1);
                valueSetter(staticsTable, key, 0, 0);
                valueSetter(staticsTable, key, 0, 1);
                valueSetter(staticsTable, key, 0, 2);
                valueSetter(staticsTable, key, 0, 3);
                valueSetter(staticsTable, key, 0, 4);
                valueSetter(staticsTable, key, 0, 5);
                valueSetter(staticsTable, key, 0, 6);
                valueSetter(staticsTable, key, 0, 7);
                valueSetter(staticsTable, key, 0, 8);
                cTable.setModel(staticsTable);
                break;
            case "France":
                staticsTable.setRowCount(1);
                valueSetter(staticsTable, key, 0, 0);
                valueSetter(staticsTable, key, 0, 1);
                valueSetter(staticsTable, key, 0, 2);
                valueSetter(staticsTable, key, 0, 3);
                valueSetter(staticsTable, key, 0, 4);
                valueSetter(staticsTable, key, 0, 5);
                valueSetter(staticsTable, key, 0, 6);
                valueSetter(staticsTable, key, 0, 7);
                valueSetter(staticsTable, key, 0, 8);
                cTable.setModel(staticsTable);
                break;
            case "Germany":
                staticsTable.setRowCount(1);
                valueSetter(staticsTable, key, 0, 0);
                valueSetter(staticsTable, key, 0, 1);
                valueSetter(staticsTable, key, 0, 2);
                valueSetter(staticsTable, key, 0, 3);
                valueSetter(staticsTable, key, 0, 4);
                valueSetter(staticsTable, key, 0, 5);
                valueSetter(staticsTable, key, 0, 6);
                valueSetter(staticsTable, key, 0, 7);
                valueSetter(staticsTable, key, 0, 8);
                cTable.setModel(staticsTable);
                break;
            case "Turkey":
                staticsTable.setRowCount(1);
                valueSetter(staticsTable, key, 0, 0);
                valueSetter(staticsTable, key, 0, 1);
                valueSetter(staticsTable, key, 0, 2);
                valueSetter(staticsTable, key, 0, 3);
                valueSetter(staticsTable, key, 0, 4);
                valueSetter(staticsTable, key, 0, 5);
                valueSetter(staticsTable, key, 0, 6);
                valueSetter(staticsTable, key, 0, 7);
                valueSetter(staticsTable, key, 0, 8);
                cTable.setModel(staticsTable);
                break;
            default:
                break;
        }
    }
    //Tabloya tüm aktarılan değerleri setler
    public DefaultTableModel valueSetter(DefaultTableModel dtm, String countryName, int row, int column) {
        COVIDClient client = new COVIDClient();
        Covid covid = client.getCovid(countryName);

        switch (column) {
            case 0:
                dtm.setValueAt(covid.country, row, column);
                break;
            case 1:
                dtm.setValueAt(covid.cases, row, column);
                break;
            case 2:
                dtm.setValueAt(covid.todayCases, row, column);
                break;
            case 3:
                dtm.setValueAt(covid.deaths, row, column);
                break;
            case 4:
                dtm.setValueAt(covid.todayDeaths, row, column);
                break;
            case 5:
                dtm.setValueAt(covid.recovered, row, column);
                break;
            case 6:
                dtm.setValueAt(covid.active, row, column);
                break;
            case 7:
                dtm.setValueAt(covid.critical, row, column);
                break;
            case 8:
                dtm.setValueAt(covid.totalTests, row, column);
                break;
            default:
                break;
        }

        return dtm;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(COVIDFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(COVIDFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(COVIDFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(COVIDFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new COVIDFrame().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(COVIDFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable cTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree staticsTree;
    // End of variables declaration//GEN-END:variables
}
